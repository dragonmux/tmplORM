name: Build Linux

on:
  push:
    branches-ignore:
      - 'coverityScan'
  pull_request:
    branches:
      - 'main'

jobs:
  build-linux:
    name: 'build-linux (${{ matrix.os.id }}, ${{ matrix.os.name }}, ${{ matrix.compiler }}, cov=${{ matrix.coverage }})'
    runs-on: ${{ matrix.os.id }}
    strategy:
      matrix:
        os:
          - { id: ubuntu-20.04, name: focal }
        compiler:
          - 'gcc-7'
          - 'gcc-8'
          - 'gcc-9'
          - 'gcc-10'
          - 'gcc-11'
        coverage: [false, true]
      fail-fast: false
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: ${{ secrets.MSSQL_PASSWORD }}
        ports:
          - 1433:1433
      mysql:
        image: mariadb
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        ports:
          - 3306:3306
      pgsql:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{ secrets.PGSQL_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Runtime environment
        shell: bash
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "GITHUB_WORKSPACE=`pwd`" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$HOME/.local/lib/`uname -m`-linux-gnu/pkgconfig" >> $GITHUB_ENV
          echo "MSSQL_HOST=127.0.0.1" >> $GITHUB_ENV
          echo "MSSQL_USERNAME=SA" >> $GITHUB_ENV
          echo "MSSQL_PASSWORD=${{ secrets.MSSQL_PASSWORD }}" >> $GITHUB_ENV
          echo "MYSQL_HOST=127.0.0.1" >> $GITHUB_ENV
          echo "MYSQL_USERNAME=root" >> $GITHUB_ENV
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> $GITHUB_ENV
          echo "PGSQL_PASSWORD=${{ secrets.PGSQL_PASSWORD }}" >> $GITHUB_ENV
      - name: Coverage environment
        env:
          COVERAGE: ${{ matrix.coverage }}
        run: |
          echo "Coverage enabled for build? ${{ matrix.coverage }}"
          echo -n "COVERAGE=" >> $GITHUB_ENV
          ([ $COVERAGE == "true" ] && echo 1 || echo 0) >> $GITHUB_ENV
          echo -n "BUILD_OPTS=" >> $GITHUB_ENV
          ([ $COVERAGE == "true" ] && echo "--buildtype=debug -Db_sanitize=address,undefined" || echo "") >> $GITHUB_ENV
      - name: Setup GCC
        if: startsWith(matrix.compiler, 'gcc')
        shell: bash
        run: |
          CXX=${CC/#gcc/g++}
          sudo apt-add-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install $CC $CXX
          echo "CC=$CC" >> $GITHUB_ENV
          echo "CXX=$CXX" >> $GITHUB_ENV
          [ $COVERAGE -ne 0 ] && echo "GCOV=${CC/#gcc/gcov}" >> $GITHUB_ENV || true
        env:
          CC: ${{ matrix.compiler }}
      - name: Setup Clang
        if: startsWith(matrix.compiler, 'clang')
        shell: bash
        run: |
          wget https://apt.llvm.org/llvm-snapshot.gpg.key
          sudo apt-key add llvm-snapshot.gpg.key
          rm llvm-snapshot.gpg.key
          sudo apt-add-repository "deb https://apt.llvm.org/${{ matrix.os.name }}/ llvm-toolchain-${{ matrix.os.name }} main"
          sudo apt-get update
          CXX=${CC/#clang/clang++}
          sudo apt-get install $CC $CXX
          echo "CC=$CC" >> $GITHUB_ENV
          echo "CXX=$CXX" >> $GITHUB_ENV
          [ $COVERAGE -ne 0 ] && echo "GCOV=/usr/lib/${CC/#clang/llvm}/bin/llvm-cov gcov" >> $GITHUB_ENV || true
        env:
          CC: ${{ matrix.compiler }}
        working-directory: ${{ runner.temp }}
      - name: Setup MariaDB/MySQL libs
        shell: bash
        run: sudo apt-get install libmariadb-dev libmariadb-dev-compat
      - name: Setup unixODBC/MSSQL libs
        shell: bash
        run: |
          wget https://packages.microsoft.com/keys/microsoft.asc
          sudo apt-key add microsoft.asc
          rm microsoft.asc
          wget https://packages.microsoft.com/config/${OS/-//}/prod.list
          sudo mv prod.list /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install msodbcsql17 unixodbc-dev
          echo 'MSSQL_DRIVER="ODBC Driver 17 for SQL Server"' >> $GITHUB_ENV
        env:
          OS: ${{ matrix.os.id }}
      - name: Setup Postgres libs
        shell: bash
        run: sudo apt-get install libpq-dev
      - name: Setup Meson + Ninja
        shell: bash
        run: |
          sudo python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install --user meson ninja
        working-directory: ${{ runner.temp }}
      - name: Version tools
        shell: bash
        run: |
          $CC --version
          $CXX --version
          [ $COVERAGE -ne 0 ] && $GCOV --version || true
          meson --version
          ninja --version
      - name: Checkout crunch
        uses: actions/checkout@v2
        with:
          repository: DX-MON/crunch
          path: crunch
          lfs: true
          submodules: true
      - name: Build + Install crunch
        run: |
          meson build --prefix=$HOME/.local $BUILD_OPTS
          ninja -C build
          ninja -C build install
          cd ..
          rm -rf crunch
        working-directory: ${{ github.workspace }}/crunch
      - name: Checkout rSON
        uses: actions/checkout@v2
        with:
          repository: DX-MON/rSON
          path: rSON
          lfs: true
          submodules: true
      - name: Build + Install rSON
        run: |
          meson build --prefix=$HOME/.local $BUILD_OPTS
          ninja -C build
          ninja -C build install
          cd ..
          rm -rf rSON
        working-directory: ${{ github.workspace }}/rSON
      - name: Checkout tmplORM
        uses: actions/checkout@v2
        with:
          lfs: true
          submodules: true
      - name: Configure
        run: meson build --prefix=$HOME/.local -Dbuild_check=false -Db_coverage=${{ matrix.coverage }} $BUILD_OPTS
      - name: Build (no rSON)
        run: ninja -C build
      - name: Cleanup
        run: rm -rf build
      - name: Configure
        run: meson build --prefix=$HOME/.local -Db_coverage=${{ matrix.coverage }} $BUILD_OPTS
      - name: Build
        run: ninja -C build
      - name: Test
        run: |
          ninja -C build buildCheck
          ninja -C build test
      - name: Install
        run: ninja -C build install
      - name: Codecov
        if: success() && matrix.coverage
        uses: codecov/codecov-action@v2
